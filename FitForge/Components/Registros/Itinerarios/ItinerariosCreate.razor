@page "/Itinerarios/Create"
@inject IItinerariosService ItinerariosService
@inject IClasesService ClasesService
@inject IEntrenadoresService EntrenadoresService
@inject IDiasHorariosService DiasHorariosService
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<Toasts class="p-3" Messages="Notificacion" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />


<div class="wrapper">
    <div class="form-section">
        <EditForm Model="itinerarioDto" OnValidSubmit="Guardar" FormName="frmItinerario">
            <DataAnnotationsValidator />

            <div class="text-black text-center">
                <h3><strong>Registro de Itinerario</strong></h3>
                <p>Complete la información para crear un nuevo itinerario</p>
            </div>

            <!-- Clase -->
            <div class="form-floating mb-3">
                <InputSelect id="ClaseId" class="form-select" @bind-Value="itinerarioDto.ClaseId">
                    <option value="">Seleccione una clase</option>
                    @foreach (var clase in ListaClases)
                    {
                        <option value="@clase.ClaseId">@clase.Descripcion</option>
                    }
                </InputSelect>
                <label for="ClaseId">Clase</label>
                <ValidationMessage For="@(() => itinerarioDto.ClaseId)" />
            </div>

            <!-- Entrenador -->
            <div class="form-floating mb-3">
                <InputSelect id="EntrenadorId" class="form-select" @bind-Value="itinerarioDto.EntrenadorId">
                    <option value="">Seleccione un entrenador</option>
                    @foreach (var entrenador in ListaEntrenadores)
                    {
                        <option value="@entrenador.EntrenadorId">@entrenador.Nombres</option>
                    }
                </InputSelect>
                <label for="EntrenadorId">Entrenador</label>
                <ValidationMessage For="@(() => itinerarioDto.EntrenadorId)" />
            </div>

            <!-- Día y horario -->
            <div class="form-floating mb-3">
                <InputSelect id="DiaHorarioId" class="form-select" @bind-Value="itinerarioDto.DiaHorarioId">
                    <option value="">Seleccione un día y horario</option>
                    @foreach (var diaHorario in ListaDiasHorarios)
                    {
                        <option value="@diaHorario.DiaHorarioId">@diaHorario.DiaHorarioDescripcion</option>
                    }
                </InputSelect>
                <label for="DiaHorarioId">Día y Horario</label>
                <ValidationMessage For="@(() => itinerarioDto.DiaHorarioId)" />
            </div>

            <!-- Precio -->
            <div class="form-floating mb-3">
                <InputNumber id="Precio" class="form-control" @bind-Value="itinerarioDto.Precio" />
                <label for="Precio">Precio</label>
                <ValidationMessage For="@(() => itinerarioDto.Precio)" />
            </div>

            <!-- Botón para registrar itinerario -->
            <button type="submit" class="btn" style="background-color: #96305a; color: #fff;">
                Registrar Itinerario
            </button>

            <!-- Mensaje de éxito o error -->
            @if (!string.IsNullOrEmpty(mensajeExito))
            {
                <div class="alert alert-info mt-2">
                    @mensajeExito
                </div>
            }
        </EditForm>
    </div>

    <div class="welcome-section">
        <img src="/images/fitforge-logo.png" alt="FitForge Logo" width="200">
        <br />
        <a href="/Itinerarios/Index" class="btn" style="background-color: #96305a; color: #fff;">
            Volver
        </a>
    </div>
</div>

<head>
    <link href="css/Login.css" rel="stylesheet" />
</head>

@code {
    [SupplyParameterFromForm]
    private ItinerariosDto itinerarioDto { get; set; } = new ItinerariosDto();
    private List<ClasesDto> ListaClases = new();
    private List<EntrenadoresDto> ListaEntrenadores = new();
    private List<DiasHorariosDto> ListaDiasHorarios = new();
    private string mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaClases = await ClasesService.ObtenerClasesAsync();
            ListaEntrenadores = await EntrenadoresService.ObtenerEntrenadoresAsync();
            ListaDiasHorarios = await DiasHorariosService.ObtenerDiasHorariosAsync();
        }
        catch (Exception ex)
        {
            mensajeExito = $"Error al cargar datos: {ex.Message}";
        }
    }

    public List<ToastMessage> Notificacion = new List<ToastMessage>();
    public ToastType TipoNotificacion { get; set; }
    public string MensajeNotificacion { get; set; } = string.Empty;
    public string TituloNotificacion { get; set; } = string.Empty;

    private async Task Guardar()
    {
        try
        {
            // Intentar guardar el registro
            var guardado = await ItinerariosService.Guardar(itinerarioDto);

            if (guardado)
            {
                TipoNotificacion = ToastType.Success;
                TituloNotificacion = "Enhorabuena";
                MensajeNotificacion = "¡El itinerario fue creado exitosamente!";
                ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                itinerarioDto = new ItinerariosDto(); // Reinicia el formulario
            }
            else
            {
                TipoNotificacion = ToastType.Danger;
                TituloNotificacion = "Error";
                MensajeNotificacion = "No se pudo crear el itinerario.";
                ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
            }
        }
        catch (Exception ex)
        {
            TipoNotificacion = ToastType.Danger;
            TituloNotificacion = "Error";
            MensajeNotificacion = "Ocurrió un error inesperado al crear el itinerario.";
            ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
    }
    public void ShowMessage(ToastType toastType, string titulo, string cuerpo) => Notificacion.Add(CreateToastMessage(toastType, titulo, cuerpo));
    private ToastMessage CreateToastMessage(ToastType toastType, string titulo, string cuerpo)
    => new ToastMessage
        {
            Type = toastType,
            Title = $"{titulo}",
            HelpText = $"{DateTime.Now}",
            Message = $"{cuerpo}",
        };
}
