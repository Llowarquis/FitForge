@page "/Inscripcion/Index/{ClienteId:int}"
@page "/Inscripcion/Index"
@inject IInscripcionesService InscripcionesService
@inject IClientesService ClientesService
@inject IMembresiasService MembresiasService
@inject AuthenticationStateProvider AuthStateProvider


@rendermode InteractiveServer

<Toasts class="p-3" Messages="Notificacion" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />



<PageTitle>Inscripciones</PageTitle>
<body style="background-color: #F5E1CE">
    <div class="container">
        <div class="card shadow-lg">
            @*HEADER*@
            <div class="card-header text-center" style="background-color: #CA678E">
                <h3><b>Inscripciones</b></h3>
            </div>

            @*BODY*@
            <div class="card-body" style="background-color: #F5E1E8">
                <div class="row">
                    <div class="col-md-3">
                        <div class="input-group">
                            <div class="form-floating d-flex align-items-center">
                                <InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
                                    <option value="" selected disabled>--- Selecciona ---</option>
                                    <option value="precio">Precio</option>
                                    <option value="fechainscripcion">Fecha de Inscripcion</option>
                                </InputSelect>
                                <label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
                            </div>
                            <button type="button" class="btn custom-button bi bi-arrow-counterclockwise ms-2" @onclick="Restablecer"></button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <div class="form-floating d-flex align-items-center flex-grow-1">
                                <InputText @bind-Value="@searchBarValue" class="form-control" placeholder="Buscar" id="floatingSearch" />
                                <label for="floatingSearch">Buscar</label>
                            </div>
                            <button @onclick="Buscar" class="btn custom-button bi bi-search ms-2" type="button"></button>
                        </div>
                    </div>
                    <div class="col-md-3 text-end">
                        @*Botón Crear*@
                        <div class="col-12 text-start mb-3">
                            <a href="/Inscripcion/Create/@ClienteId" class="btn custom-button bi bi-plus-square">
                                Crear Inscripción
                            </a>
                        </div>
                    </div>

                </div>
                @if (valorFiltro == "fechainscripcion")
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="form-floating">
                                <InputDate @bind-Value="Desde" class="form-control" />
                                <label for="desde"><b>Desde...</b></label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating">
                                <InputDate @bind-Value="Hasta" class="form-control" />
                                <label for="hasta"><b>Hasta...</b></label>
                            </div>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(MensajeError))
                {
                    <div class="alert alert-danger mt-3">@MensajeError</div>
                }

                @if (ListaInscripciones == null || !ListaInscripciones.Any())
                {
                    <div class="text-center mt-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                    </div>
                }
                else
                {
                    <table class="table table-striped table-hover mt-3">
                        <thead>
                            <tr>
                                <th><b>Clientes</b></th>
                                <th><b>Membresía</b></th>
                                <th><b>Fecha de Inscripción</b></th>
                                <th><b>Precio</b></th>
                                <th><b>Editar</b></th>
                                <th><b>Eliminar</b></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var inscripcion in ListaInscripciones)
                            {
                                <tr>
                                    <td>@inscripcion.Cliente?.Nombres</td>
                                    <td>@inscripcion.Membresia.Descripcion</td>
                                    <td>@inscripcion.FechaInscripcion.ToString("dd/MM/yyyy")</td>
                                    <td>@($"${inscripcion.Precio:N2}")</td>
                                    <td>
                                        <a class="btn btn-sm custom-button bi bi-pencil-square" href="/Inscripcion/Edit/@inscripcion.InscripcionId?ClienteId=@inscripcion.ClienteId">
                                            Editar
                                        </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm custom-button bi bi-trash" @onclick="() => MostrarModal(inscripcion.InscripcionId)">
                                            Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <label>Cantidad: @ListaInscripciones.Count()</label>
                }
            </div>
        </div>
    </div>

    @if (mostrarModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog" aria-hidden="false">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: #CA678E; color: white;">
                        <h5 class="modal-title">Confirmación</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar esta inscripción?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="button" class="btn btn-danger" @onclick="EliminarInscripcion">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show" @onclick="CerrarModal"></div> <!-- Añadido para cerrar el modal al hacer clic fuera -->
    }
</body>

@*Estilos personalizados*@
<style>
    .custom-button {
        background-color: #96305a;
        color: white;
    }

        .custom-button:hover {
            background-color: #ca678e;
            color: white;
        }

    /* Opciones de tabla */
    .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: #F5E1E8;
    }

    .table-hover tbody tr:hover {
        background-color: #CA678E !important;
        color: white;
    }
</style>


@code {
    [Parameter]
    public int ClienteId { get; set; }

    public string searchBarValue { get; set; } = string.Empty;
    public string valorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; } = null;
    public DateTime? Hasta { get; set; } = null;


    public List<InscripcionesDto> ListaInscripciones = new();
    public ClientesDto ClienteActual { get; set; }
    public List<MembresiasDto> ListaMembresias = new();

    private string MensajeError = string.Empty;
    private bool mostrarModal = false;
    private int InscripcionIdSeleccionada;
    // Variable para almacenar el correo electrónico del usuario autenticado
    public string UsuarioEmail { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtén el estado de autenticación del usuario actual
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                // Extrae el correo electrónico del claim "email"
                UsuarioEmail = user.Identity.Name;
            }
            else
            {
                UsuarioEmail = "Usuario no autenticado";
            }

            // Obtener el ClienteId basado en el correo del usuario
            int? clienteIdPorEmail = await ClientesService.ObtenerClienteIdPorEmail(UsuarioEmail);

            if (clienteIdPorEmail.HasValue && clienteIdPorEmail.Value != 0)
            {
                // Si encontramos un ClienteId distinto de cero, lo usamos
                ClienteId = clienteIdPorEmail.Value;
            }

            // Obtener el cliente actual por el ClienteId (nuevo o existente)
            ClienteActual = await ClientesService.ObtenerClientePorId(ClienteId);

            if (ClienteActual == null)
            {
                // Manejo de errores: Cliente no encontrado
                throw new Exception("Cliente no encontrado.");
            }

            // Cargar membresías e inscripciones relacionadas
            ListaMembresias = await MembresiasService.ObtenerMembresiasAsync();
            ListaInscripciones = await InscripcionesService.Listar(t => t.ClienteId == ClienteId);
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al inicializar: {ex.Message}";
        }
    }







    private void MostrarModal(int inscripcionId)
    {
        InscripcionIdSeleccionada = inscripcionId;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        InscripcionIdSeleccionada = 0;
    }

    private async Task EliminarInscripcion()
    {
        try
        {
            await InscripcionesService.Eliminar(InscripcionIdSeleccionada);
            var inscripcion = ListaInscripciones.FirstOrDefault(i => i.InscripcionId == InscripcionIdSeleccionada);
            if (inscripcion != null)
                ListaInscripciones.Remove(inscripcion);

            mostrarModal = false;
            InscripcionIdSeleccionada = 0;
            TipoNotificacion = ToastType.Success;
            TituloNotificacion = "Enhorabuena";
            MensajeNotificacion = "¡Se ha eliminado la inscripcion exitosamente!";
            ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
        catch (Exception ex)
        {
            TipoNotificacion = ToastType.Danger;
            TituloNotificacion = "Error";
            MensajeNotificacion = "Hubo un error al eliminar la membresia.";
            ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
    }
    // NOTIFICACIONES
    public List<ToastMessage> Notificacion = new List<ToastMessage>();
    public ToastType TipoNotificacion { get; set; }
    public string MensajeNotificacion { get; set; } = string.Empty;
    public string TituloNotificacion { get; set; } = string.Empty;

    public void ShowMessage(ToastType toastType, string titulo, string cuerpo) => Notificacion.Add(CreateToastMessage(toastType, titulo, cuerpo));
    private ToastMessage CreateToastMessage(ToastType toastType, string titulo, string cuerpo)
    => new ToastMessage
        {
            Type = toastType,
            Title = $"{titulo}",
            HelpText = $"{DateTime.Now}",
            Message = $"{cuerpo}",
        };

    public async Task Restablecer()
    {
        TipoNotificacion = ToastType.Info;
        TituloNotificacion = "Aviso";
        MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
        ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        ListaInscripciones = await InscripcionesService.Listar(c => true);
        searchBarValue = string.Empty;
        valorFiltro = string.Empty;
        Desde = null;
        Hasta = null;
    }

    public async Task Buscar()
    {
        if (string.IsNullOrEmpty(valorFiltro))
        {
            TipoNotificacion = ToastType.Warning;
            TituloNotificacion = "Aviso";
            MensajeNotificacion = "Debe seleccionar una opción en el fitro.";
            ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
            ListaInscripciones = await InscripcionesService.Listar(c => true);
        }

        searchBarValue.Trim().ToLower();

        switch (valorFiltro)
        {
            case "precio":
                if (string.IsNullOrEmpty(searchBarValue))
                {
                    TipoNotificacion = ToastType.Warning;
                    TituloNotificacion = "Aviso";
                    MensajeNotificacion = "Debe proveer El precio de la membresia para buscar.";
                    ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                }
                ListaInscripciones = await InscripcionesService.Listar(lt => lt.Precio.ToString().Trim().ToLower()
                                                             .Contains(searchBarValue));
                break;

            case "fechainscripcion":
                if (Desde > Hasta)
                {
                    TipoNotificacion = ToastType.Warning;
                    TituloNotificacion = "Aviso";
                    MensajeNotificacion = "La fecha inicial no puede ser mayor a la final.";
                    ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                }
                if (Desde == null || Hasta == null)
                {
                    TipoNotificacion = ToastType.Warning;
                    TituloNotificacion = "Aviso";
                    MensajeNotificacion = "Ambos campos de fecha deben estar llenos.";
                    ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
                }
                ListaInscripciones = await InscripcionesService.Listar(f => f.FechaInscripcion >= Desde && f.FechaInscripcion <= Hasta);
                break;

            default:
                ListaInscripciones = await InscripcionesService.Listar(x => true);
                break;
        }
    }
}