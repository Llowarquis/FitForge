@page "/Tarjetas/Index/{ClienteId:int}"
@inject ITarjetasService TarjetasService
@inject IClientesService ClientesService

@rendermode InteractiveServer


<PageTitle>Tarjetas</PageTitle>
<body style="background-color: #F5E1CE">
    <div class="container">
        <div class="card shadow-lg">
            @*HEADER*@
            <div class="card-header text-center" style="background-color: #CA678E">
                <h3><b>Tarjetas</b></h3>
            </div>

            @*BODY*@
            <div class="card-body" style="background-color: #F5E1E8">
                <div class="row">
                    @*Botón Crear*@
                    <div class="col-12 text-start mb-3">
                        <a href="/Tarjetas/Create/@ClienteId" class="btn custom-button bi bi-plus-circle">
                            Crear Tarjeta
                        </a>
                    </div>
                </div>

                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th><b>Nombre del Cliente</b></th>
                            <th><b>Numero de la Tarjeta</b></th>
                            <th><b>Cvv</b></th>
                            <th><b>Fecha de Vencimiento</b></th>
                            <th><b>Acciones</b></th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var tarjeta in ListaTarjetas)
                        {
                            <tr>
                                <td>@tarjeta.Cliente?.Nombres</td>
                                <td>@tarjeta.NumeroTarjeta</td>
                                <td>@tarjeta.Cvv</td>
                                <td>@tarjeta.FechaVencimiento.ToShortDateString()</td>
                                <td>
                                    <div class="d-flex justify-content-between">
                                        <a href="/Tarjetas/Edit/@tarjeta.TarjetaId?ClienteId=@tarjeta.ClienteId" class="btn btn-sm custom-button bi bi-pencil-square"> Editar</a>
                                        <button class="btn btn-sm custom-button bi bi-trash" @onclick="() => MostrarModal(tarjeta.TarjetaId)"> Eliminar</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <caption>
                        Tarjetas: @ListaTarjetas.Count()
                    </caption>
                </table>
            </div>
        </div>
    </div>

    @if (mostrarModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: #CA678E; color: white;">
                        <h5 class="modal-title">Confirmación</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar esta Tarjeta?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="button" class="btn btn-danger" @onclick="EliminarTarjeta">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show" @onclick="CerrarModal"></div> <!-- Añadido para cerrar el modal al hacer clic fuera -->
    }
</body>

@*Estilos personalizados*@
<style>
    .custom-button {
        background-color: #96305a;
        color: white;
    }

        .custom-button:hover {
            background-color: #ca678e;
            color: white;
        }

    /* Opciones de tabla */
    .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: #F5E1E8;
    }

    .table-hover tbody tr:hover {
        background-color: #CA678E !important;
        color: white;
    }
</style>


@code {
    [Parameter]
    public int ClienteId { get; set; } // ClienteId obtenido desde la URL

    public List<TarjetasDto> ListaTarjetas = new List<TarjetasDto>();
    public ClientesDto ClienteActual { get; set; }
    private bool mostrarModal = false;
    private int TarjetaIdSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener información del cliente actual
            ClienteActual = await ClientesService.ObtenerClientePorId(ClienteId);
            if (ClienteActual == null)
            {
                // Manejo de errores: Cliente no encontrado
                throw new Exception("Cliente no encontrado.");
            }

            // Filtrar tarjetas por ClienteId
            ListaTarjetas = await TarjetasService.Listar(t => t.ClienteId == ClienteId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar: {ex.Message}");
        }
    }

    private void MostrarModal(int tarjetaId)
    {
        TarjetaIdSeleccionada = tarjetaId;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        TarjetaIdSeleccionada = 0;
    }

    private async Task EliminarTarjeta()
    {
        try
        {
            await TarjetasService.Eliminar(TarjetaIdSeleccionada);
            ListaTarjetas = await TarjetasService.Listar(t => t.ClienteId == ClienteId);
            mostrarModal = false;
            TarjetaIdSeleccionada = 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar: {ex.Message}");
        }
    }
}
