@page "/Clientes/Index"

@inject NavigationManager navigationManager
@inject ClientesService clientesService
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<Toasts class="p-3" Messages="Notificacion" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />


<PageTitle>Listado Clientes</PageTitle>
<body style="background-color: #F5E1CE">
	<div class="container">
		<div class="card shadow-lg">
			@*HEADER*@
			<div class="card-header text-center" style="background-color: #CA678E">
				<h3><b>Consulta de Clientes</b></h3>
			</div>

			@*BODY*@
			<div class="card-body" style="background-color: #F5E1E8">
				<div class="row">
					<div class="col-4">
						<div class="input-group" style="width: 250px">
							<div class="form-floating d-flex align-items-center">
								<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
									<option value="" selected disabled>--- Selecciona ---</option>
									<option value="idcliente">ID Cliente</option>
									<option value="idusuario">ID Usuario</option>
									<option value="nombres">Nombre</option>
									<option value="email">Email</option>
									<option value="cedula">C&eacute;dula</option>
									<option value="pin">Pin</option>
								</InputSelect>
								<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
							</div>
							@*btn restablecer*@
							<button type="button" class="btn custom-button bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
						</div>
					</div>

					@*Btn Buscar*@
					<div class="col text-start">
						<div class="input-group" style="width: 500px">
							@*textbox buscar*@
							<div class="form-floating d-flex align-items-center">
								<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="Buscar" id="floatingSearch" />
								<label for="floatingSearch">Buscar</label>
							</div>
							<button @onclick="Buscar" class="btn custom-button bi bi-search" type="button"></button>
						</div>
					</div>

					@*Btn crear*@
					<div class="col-2 text-start">
						<label></label>
						<div>
							<a class="btn btn-lg custom-button bi bi-plus-circle" href="/Clientes/Create">    Crear</a>
						</div>
					</div>
				</div>
				<br />
				<table class="table table-sm table-striped table-hover">
					<thead>
						<tr>
							<th><b>ID Cliente</b></th>
							<th><b>Nombre</b></th>
							<th><b>Email</b></th>
							<th><b>Tel&eacute;fono</b></th>
							<th><b>C&eacute;dula</b></th>
							<th><b>Pin</b></th>
							<th><b>Fecha de Nacimiento</b></th>
							<th><b>Acciones</b></th>
						</tr>
					</thead>
					<tbody class="table-group-divider">
						@foreach (var cliente in ListaClientes)
						{
							<tr>
								<th>@cliente.ClienteId</th>
								<th>@cliente.Nombres</th>
								<th>@cliente.Email</th>
								<th>@cliente.Telefono</th>
								<th>@cliente.Cedula</th>
								<th>@cliente.Pin</th>
								<th>@cliente.FechaNacimiento</th>
								<th>
									<div class="btn-group">
										<button class="btn custom-button btn-sm bi bi-eye dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
											Ver
										</button>
										<ul class="dropdown-menu">
											<li><a class="dropdown-item" href="#">Pagos</a></li>
											<li><a class="dropdown-item" href="#">Estado de Membres&iacute;a</a></li>
											<li><a class="dropdown-item" href="#">Info de Usuario</a></li>
										</ul>
									</div>
									<a href="/Clientes/Edit/@cliente.ClienteId" class="btn btn-sm bi bi-pencil-square custom-button"> Editar</a>
									<a href="/Clientes/Delete/@cliente.ClienteId" class="btn btn-sm custom-button bi bi-trash"> Eliminar</a>
								</th>
							</tr>
						}
					</tbody>
					<caption>
						Clientes: @ListaClientes.Count
					</caption>
				</table>
			</div>
		</div>
	</div>
</body>

@*Esto es para todos los botones de este componente*@
<style>
	.custom-button {
		background-color: #96305a;
		color: white;
	}

		.custom-button:hover {
			background-color: #ca678e;
			color: white;
		}

	/* Estilo del fondo y texto del menú desplegable */
	.dropdown-menu {
		background-color: #96305a; /* Fondo del menú */
	}

	/* Color del texto de los elementos del menú */
	.dropdown-item {
		color: white; /* Texto blanco */
	}

		/* Hover: Mantener el texto blanco y cambiar el fondo */
		.dropdown-item:hover {
			background-color: #ca678e; /* Fondo al pasar el mouse */
			color: white; /* Mantener texto blanco */
		}

		/* Opcional: Sin borde en los elementos del menú */
		.dropdown-item:focus, .dropdown-item:active {
			background-color: #ca678e; /* Fondo cuando está seleccionado */
			color: white;
		}
</style>

@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public DateOnly? Desde { get; set; } = null;
	public DateOnly? Hasta { get; set; } = null;
	public List<ClientesDto> ListaClientes { get; set; } = new List<ClientesDto>();

	protected override async Task OnInitializedAsync()
	{
		ListaClientes = await clientesService.Listar(x => true);
	}

	public List<ToastMessage> Notificacion = new List<ToastMessage>();
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	public void ShowMessage(ToastType toastType, string titulo, string cuerpo) => Notificacion.Add(CreateToastMessage(toastType, titulo, cuerpo));
	private ToastMessage CreateToastMessage(ToastType toastType, string titulo, string cuerpo)
	=> new ToastMessage
		{
			Type = toastType,
			Title = $"{titulo}",
			AutoHide = true,
			HelpText = $"{DateTime.Now}",
			Message = $"{cuerpo}",
		};

	public async Task Buscar()
	{
		if (string.IsNullOrEmpty(valorFiltro))
		{
			TipoNotificacion = ToastType.Warning;
			TituloNotificacion = "Aviso";
			MensajeNotificacion = "Debe seleccionar una opción en el fitro.";
			ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
			ListaClientes = await clientesService.Listar(x => true);
			return;
		}

		searchBarValue.Trim().ToLower();

		switch (valorFiltro)
		{
			case "idcliente":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un ID de cliente para buscar";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					// Toast.Notify(new(ToastType.Warning, $"Debe proveer un ID para buscar"));
					return;
				}
				if (!searchBarValue.All(char.IsDigit))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "El criterio de búsqueda solo puede alojar numeros.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (int.TryParse(searchBarValue, out int id))
					ListaClientes = await clientesService.Listar(lt => lt.ClienteId == id);
				break;

			case "idusuario":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un ID de usuario para buscar.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaClientes = await clientesService.Listar(lt => lt.UserId.Trim().ToLower()
																		== searchBarValue);
				break;

			case "email":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un email para buscar.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaClientes = await clientesService.Listar(lt => lt.Email.Trim().ToLower()
															.Contains(searchBarValue));
				break;

			case "nombres":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un nombre y/o apellido/s para buscar.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaClientes = await clientesService.Listar(lt => lt.Nombres.Trim().ToLower()
															.Contains(searchBarValue));
				break;

			case "cedula":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer una cédula para buscar.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaClientes = await clientesService.Listar(lt => lt.Cedula.Trim().ToLower()
															.Contains(searchBarValue));
				break;

			case "pin":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un pin para buscar.";
					ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaClientes = await clientesService.Listar(lt => lt.Pin.ToString().Trim().ToLower()
															.Contains(searchBarValue));
				break;

			default:
				ListaClientes = await clientesService.Listar(x => true);
				break;
		}
	}

	public async Task Restablecer()
	{
		ListaClientes = await clientesService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}
}